# swig-101

Introduction to [SWIG](http://www.swig.org/).

# HOWTO

## OSX

* Install macports
* sudo port install swig swig-ruby swig-python swig-java python3.8
* Install rbenv + ruby-build plugin
* rbenv install 2.3.0
* Install JVM 11.0.2
* Install clojure + clojure-tools

## Build

```
$ rbenv shell 2.3.0
$ gmake clean all
```

<%
require 'pp'

def msg *args
  $stderr.puts "  !!! README.md.erb : #{args * ' '}"
end

msg "Start"

def pe x
  PP.pp(x, $stderr)
  x
end

def run cmd
  msg "run : #{cmd.inspect}"
  `#{cmd}`
end

def wrap_line line, width = 78
  words = line.split(' ')
  out = String.new
  line = String.new
  words.each do | word |
    if line.size + word.size > width
      out += line + "  \\\n  "
      line = word
    else
      line += ' ' + word
    end
  end
  out << line
end

examples = [ ]
targets = nil
%>

<%
msg "Examples"

%w(example1.c example2.cc).each do | example_name |
  example_src     = "src/#{example_name}"
  example         = example_name.sub(/\.([^.]+)$/, '')
  example_suffix  = $1
  examples << (e = {
    name:     example_name,
    basename: example,
    src:      example_src,
    suffix:   example_suffix,
  })

pe(e: e)

  targets = <<"END".split("\n").map{|l| l.split("|").map(&:strip).reject(&:empty?)}
C Header  | src/#{example}.h        | -
C Library | src/#{example_name}     | -
C Main    | src/#{example}-native.#{example_suffix} | target/native/#{example}
Ruby      | src/#{example}-ruby    | 
Python    | src/#{example}-python   |
TCL       | src/#{example}-tcl      |
Guile     | src/#{example}-guile    |
Clojure   | src/#{example}-clojure  | bin/run-clj src/#{example}-clojure
END

targets =
  targets.
  map do |l|
    t = [:type, :file, :cmd].zip(l).to_h
    t[:cmd] ||= t[:file] unless t[:cmd] == '-'
    t
  end

pe(targets: targets)
%>

# <%= example.capitalize %>

<% targets.each do | t |
  msg "target : #{t[:file]}"
%>
## <%= t[:type] %> -- <%= t[:file] %>

``` <%= t[:type].split(" ").first %>
<%= File.read(t[:file]).sub(/\A\n+|\n+\Z/, "\n") %>
```
----

```
$ <%= t[:cmd] %>
<%= `#{t[:cmd]}` %>
```
<% msg "target : #{t[:file]} : DONE"; end %>

## Output

<% targets.reject{|t| t[:cmd] == '-'}.each do | t | %>

```
$ <%= t[:cmd] %>
<%= run t[:cmd] %>
```

<% msg "target : #{t[:file]} : DONE" ; end %>

<% msg "example : #{e[:name]} : DONE"; end %>

# Workflow
<% msg "Workflow" %>

``` Sh
# Compile Library:
$ cc             src/X.c   -o native/X.o

# Generate SWIG Wrappers:
$ swig -ruby     src/X.h   -o ruby/X.c

# Compile and Link SWIG Wrappers with Library:
$ cc -dynamiclib ruby/X.c     native/X.o   -o ruby/X.so

# Load SWIG Wrappers:
$ ruby -e 'require "X"'
```

<%
e = examples.first
pe(e: e)
run 'gmake clean >/dev/null'
%>
<%=
  run "gmake clean-example build-example EXAMPLE=#{e[:name]}"
  .gsub(' -I/opt/local/include ', ' ')
  .split("\n")
  .map{|l| wrap_line(l)}
  .join("\n")
%>
<%
run 'gmake all >/dev/null'
msg 'DONE'
# exit!
%>
