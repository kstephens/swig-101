# swig-101

Introduction to [SWIG](http://www.swig.org/).

# HOWTO

## OSX

* Install macports
* sudo port install swig swig-ruby swig-python swig-java python3.8
* Install rbenv + ruby-build plugin
* rbenv install 2.3.0
* Install JVM 11.0.2
* Install clojure + clojure-tools

## Build

```
$ rbenv shell 2.3.0
$ make clean all
```

<%
exit! if ENV['README_MD']
ENV['README_MD'] = '1'

require 'pp'

$verbose = false

def msg *args
  if $verbose
    $stderr.puts "\n  !!! #{$$} : README.md.erb : #{args * ' '}"
  end
end

def pe x
  if $verbose
    PP.pp(x, $stderr)
  end
  x
end

def cmd cmd
  msg "cmd : #{cmd.inspect}"
  `#{cmd}`
end

def wrap_line line, width = 78
  words = line.strip.split(/\s+/)
  out = String.new
  line = String.new
  words.each do | word |
    if line.size + word.size > width
      out += line + " \\\n  "
      line = word
    else
      line += word + ' '
    end
  end
  out << line
end

make = `which gmake make 2>/dev/null`.split("\n").first

msg "Start"

examples = [ ]
targets = nil

cmd "#{make} all >/dev/null"
%>

<%
msg "Examples"

%w(example1.c example2.cc).each do | example_name |
  example_src     = "src/#{example_name}"
  example         = example_name.sub(/\.([^.]+)$/, '')
  example_suffix  = $1
  examples << (e = {
    name:     example_name,
    basename: example,
    src:      example_src,
    suffix:   example_suffix,
  })

  msg "{{{ Example : #{e[:name]}"
  pe(e: e)

  targets = <<"END".split("\n").map{|l| l.split("|").map(&:strip).reject(&:empty?)}
C Header  | src/#{example}.h        | -
C Library | src/#{example_name}     | -
C Main    | src/#{example}-native.#{example_suffix} | target/native/#{example}
Ruby      | src/#{example}-ruby     | 
Python    | src/#{example}-python   |
TCL       | src/#{example}-tcl      |
Guile     | src/#{example}-guile    |
Clojure   | src/#{example}-clojure  | bin/run-clj src/#{example}-clojure
END

  targets =
    targets.
    map do |l|
      t = [:type, :file, :cmd].zip(l).to_h
      t[:name] ||= t[:file]
      if t[:cmd] == '-'
        t[:cmd] = nil
      else 
        t[:cmd] ||= t[:file]
      end
      t
    end

  pe(targets: targets)
%>

# <%= example.capitalize %>

<% targets.each do | t |
  msg "{{{ Example : #{e[:name]} : Program : #{t[:name]}"
%>
## <%= t[:type] %> -- <%= t[:file] %>

``` <%= t[:type].split(" ").first %>
<%= File.read(t[:file]).sub(/\A\n+|\n+\Z/, "\n") %>
```

<% if t[:cmd] %>
----

```
$ <%= t[:cmd] %>
<%= cmd t[:cmd] %>
```
<% end %>
<%
  msg "}}} Example : #{e[:name]} : Program : #{t[:name]}"
end
%>

## Output
<%
msg "{{{ Output"
targets.select{|t| t[:cmd]}.each do | t |
  msg "#{e[:name]} : #{t[:name]} : Output : {{{"
%>

```
$ <%= t[:cmd] %>
<%= cmd t[:cmd] %>
```

<%
  msg "}}} Example : #{e[:name]} : Output : #{t[:name]}"
end
%>
<%
  msg "}}} Example : #{e[:name]}"
end
msg "}}} Output"
%>

# Workflow

<% msg "{{{ Workflow" %>
``` Sh
# Compile Library:
$ cc             src/X.c   -o native/X.o

# Generate SWIG Wrappers:
$ swig -ruby     src/X.h   -o ruby/X.c

# Compile and Link SWIG Wrappers with Library:
$ cc -dynamiclib ruby/X.c     native/X.o   -o ruby/X.so

# Load SWIG Wrappers:
$ ruby -e 'require "X"'
```

<%
[ examples.first ].each do | e |
%>
<%=
  msg "{{{ Workflow : #{e[:name]}"
  pe(e: e)
  
  cmd "#{make} clean-example EXAMPLE=#{e[:name]}"
  cmd "#{make} build-example EXAMPLE=#{e[:name]}".
  gsub(' -I/opt/local/include ', ' ').
  split("\n").
  map{|l| wrap_line(l)}.
  join("\n")
%>
<%
  msg "}}} Workflow : #{e[:name]}"
end
%>
<%
msg "}}} Workflow"
cmd "#{make} all >/dev/null"
msg 'DONE'
%>
